---
title: "Wild Blueberry EDA"
format: html
editor: visual
---

```{r}
#| code-fold: true
#| label: load-packages
#| warning: false
#| message: false


library(tidyverse)
library(ggthemes)
library(RColorBrewer)
library(plotly)
library(pheatmap)
library(corrplot)
library(plotrix)
library(tastypie)

library(gplots)
library(ggmosaic)
library(treemapify)
library(ggridges)
library(ggalluvial)
library(scatterPlotMatrix)

library(readxl)
library(writexl)

library(kableExtra)
library(multcomp)
library(agricolae)
library(factoextra)
library(FactoMineR)

```

# Cargamos el conjunto de datos

```{r}
#| code-fold: true

datos <-  read_csv("./Data_input/Data_blueberry.csv")

glimpse(datos)
datos$clonesize_factor <- factor(datos$clonesize)
datos$honeybee_factor <- factor(datos$honeybee)
datos$bumbles_factor <- factor(datos$bumbles)
datos$andrena_factor <- factor(datos$andrena)
datos$osmia_factor <- factor(datos$osmia)

datos <- datos |> mutate(Grupos_char= paste(clonesize, honeybee, bumbles, andrena, osmia))

data_grupos <- tibble(Grupos_char=unique(datos$Grupos_char)) 
data_grupos <- data_grupos |> mutate(Grupos=1:nrow(data_grupos))

datos <- left_join(datos, data_grupos)
datos$Grupos <- factor(datos$Grupos)

```

# Resumen estadístico

```{r}
#| code-fold: true

summary(datos)

```

### Alluvialplot

```{r}
#| code-fold: true


datos_alluvia <- datos  |>  dplyr::select(clonesize_factor:osmia_factor) |> 
  group_by(clonesize_factor, honeybee_factor, bumbles_factor, andrena_factor, osmia_factor) |> 
  summarize(frequency = n(), .groups = "drop")

ggplot(datos_alluvia, aes(y = frequency, axis1 = clonesize_factor, 
                          axis2 = honeybee_factor, axis3 = bumbles_factor, 
                          axis4=andrena_factor, axis5=osmia_factor)) +
  geom_alluvium(aes(fill = andrena_factor), width = 1/3, color = "black") +
  geom_stratum(width = 1/3, fill = "black", color = "grey") +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), color = "white", size = 3) +
  scale_x_discrete(limits = c("clonesize", "honeybee", "bumbles", "andrena", "osmia"), expand = c(.05, .05)) +
  scale_fill_brewer(type = "qual", palette = "Dark2") + 
  theme_minimal()

```

## Anova yield \~ clonesize

```{r}
#| code-fold: true

anova_res <- aov(yield ~ clonesize_factor, data=datos)
anova_res
summary(anova_res)
```

## Prueba de Tukey

```{r}
#| code-fold: true

parejas_tukey <- glht(anova_res, linfct = mcp(clonesize_factor = "Tukey"))
summary(parejas_tukey)
   lab_data_aov <- cld(parejas_tukey)$mcletters$Letters %>% as.vector()
   
   margen <- par(oma=c(0,5,0,0))
   plot(config(parejas_tukey), xlab=NULL)
   par(margen)
   
   
data_Q75 <- datos %>% group_by(clonesize_factor) %>% summarise(Q75=quantile(yield, 0.75, na.rm = TRUE))

  data_lab <-  data.frame(
  x=0.75:2.75,
  y=data_Q75$Q75,
  lab=lab_data_aov
)




tn_box <- ggplot(datos, aes(x=clonesize_factor,yield))+
  geom_boxplot(aes(color=clonesize_factor), show.legend = FALSE)+
  geom_text(data=data_lab, aes(x,y,label=lab), size=6, vjust=-0.2)+
  theme_bw()+
  theme(
#plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
legend.position="top",
legend.title = element_blank(),
legend.text = element_text(size=12),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
strip.text.x = element_text(size = 12)
)



tn_box 


```

## Anova yield \~ honeybee

```{r}
#| code-fold: true

anova_res <- aov(yield ~ honeybee_factor, data=datos)
anova_res
summary(anova_res)
```

## Prueba de Tukey

```{r}
#| code-fold: true

parejas_tukey <- glht(anova_res, linfct = mcp(honeybee_factor = "Tukey"))
summary(parejas_tukey)
   lab_data_aov <- cld(parejas_tukey)$mcletters$Letters %>% as.vector()
   
   margen <- par(oma=c(0,5,0,0))
   plot(config(parejas_tukey), xlab=NULL)
   par(margen)
   
   
data_Q75 <- datos %>% group_by(honeybee_factor) %>% summarise(Q75=quantile(yield, 0.75, na.rm = TRUE))

  data_lab <-  data.frame(
  x=0.75:2.75,
  y=data_Q75$Q75,
  lab=lab_data_aov
)




tn_box <- ggplot(datos, aes(x=honeybee_factor,yield))+
  geom_boxplot(aes(color=honeybee_factor), show.legend = FALSE)+
  geom_text(data=data_lab, aes(x,y,label=lab), size=6, vjust=-0.2)+
  theme_bw()+
  theme(
#plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
legend.position="top",
legend.title = element_blank(),
legend.text = element_text(size=12),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
strip.text.x = element_text(size = 12)
)



tn_box 


```

# Tabla ANOVA Grupos

```{r}
names_num <- names(dplyr::select(datos, MaxOfUpperTRange:yield))

data_p_Grupos<- tibble(Variable=names_num[1], 
                        Valor_p=summary(aov(eval(as.name(names_num[1])) ~ Grupos, data=datos, na.action=na.omit))[[1]][["Pr(>F)"]][1])
names_length <- length(names_num)

for(k in 2:names_length){
  data_p_prev <- tibble(Variable=names_num[k], 
                             Valor_p=summary(aov(eval(as.name(names_num[k])) ~ Grupos, data=datos, na.action=na.omit))[[1]][["Pr(>F)"]][1])
   data_p_Grupos<- bind_rows(data_p_Grupos, data_p_prev)
}


```

## Anova yield \~ Grupos

```{r}
#| code-fold: true

anova_res <- aov(yield ~ Grupos, data=datos)
anova_res
summary(anova_res)
```

## Prueba de Tukey

```{r}
#| code-fold: true

parejas_tukey <- glht(anova_res, linfct = mcp(Grupos = "Tukey"))


tukey_3 <- HSD.test(anova_res, trt='Grupos')
tukey_3

plot(tukey_3)

lab_data_aov <- tukey_3$groups
lab_data_aov <- lab_data_aov |> mutate(Grupos_factor=rownames(lab_data_aov), Grupos=as.double(Grupos_factor))
lab_data_aov <- lab_data_aov |> dplyr::select(Grupos, lab= groups)

lab_data_aov <- lab_data_aov |> arrange(Grupos)
lab_data_aov$Grupos <- factor(lab_data_aov$Grupos) 




#    
#    margen <- par(oma=c(0,5,0,0))
#    plot(config(parejas_tukey), xlab=NULL)
#    par(margen)
#    
#    
data_Q75 <- datos %>% group_by(Grupos) %>% summarise(Q75=quantile(yield, 0.75, na.rm = TRUE))

data_lab <-  data_Q75
data_lab <- data_lab |> mutate(x=0.75:48.75, y= Q75)
data_lab <- left_join(data_lab, lab_data_aov)




tn_box <- ggplot(datos, aes(x=Grupos,yield))+
  geom_boxplot(aes(color=Grupos), show.legend = FALSE)+
  geom_text(data=data_lab, aes(x,y,label=lab), size=2, vjust=-0.2)+
  theme_bw()+
  theme(
#plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
legend.position="top",
legend.title = element_blank(),
legend.text = element_text(size=12),
axis.text.x=element_text(size=8),
axis.text.y=element_text(size=12),
axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
strip.text.x = element_text(size = 12)
)



tn_box 


```

# PCA

## Preparación de datos

Conservar observaciones completas de las variables numéricas.

```{r}
#| code-fold: true

#datos_numeric <- datos |> dplyr::select(clonesize:yield)
datos_numeric <- datos |> dplyr::select(fruitset:yield)
```

## Resultados

::: panel-tabset
### Eigenvalores y varianzas

```{r}
#| code-fold: true



PC_total <- prcomp(datos_numeric, scale.=TRUE, center=TRUE)

eig_total <- get_eigenvalue(PC_total)
eig_tabla <- data.frame(PC=paste0("PC",1:dim(eig_total)[1]), 
                        Eigenvalor=round(eig_total$eigenvalue,3), 
                        Varianza=round(eig_total$variance.percent,2), 
                        Var_acu=round(eig_total$cumulative.variance.percent,2))

kable(eig_tabla, align = "c", col.names = c("Componente", "Eigenvalor", "% varianza", "% varianza acumulada")) %>% kable_styling(c("striped", "hover"), full_width = F)%>% scroll_box(width="100%", height="300px", fixed_thead = TRUE)
```

### Scree plot

```{r}
#| code-fold: true
fviz_eig(PC_total, addlabels = TRUE)
```

### Coeficientes (Loadings)

```{r}
#| code-fold: true
PC_coef <-data.frame(PC_total$rotation)
kable(PC_coef, align = "c") %>% kable_styling(c("striped", "hover"), full_width = F)%>% scroll_box(width="100%", height="300px", fixed_thead = TRUE)
```

### Contribución variables

```{r}
#| code-fold: true
fviz_pca_var(PC_total, col.var = "contrib", gradient.cols=c("#1627dc", "#ffb600", "#ff2e16"))
```

### Contribución PC1

```{r}
#| code-fold: true
fviz_contrib(PC_total, "var", axes = 1)
```

### Contribución PC2

```{r}
#| code-fold: true
fviz_contrib(PC_total, "var", axes = 2)
```
:::

## Proyecciones

::: panel-tabset
### Biplot

```{r}
#| code-fold: true
fviz_pca_biplot(PC_total,
                geom.ind = "point",
                fill.ind = datos$Grupos,
                pointshape = 21 ,
                pointsize = 2,
                alpha.ind=0.6,
                col.var = "black",
                #palette= ,
                label= "var",
                repel = TRUE   
  )
```

### Proyección

```{r}
#| code-fold: true
proy_scores <- fviz_pca_ind(PC_total,
             pointsize = 2,
             habillage =datos$Grupos,
             #addEllipses = TRUE,
             label= "var",
            repel = TRUE 
  )

ggplotly(proy_scores)
```
:::

# Agrupamiento jerárquico

Se estandarizan los datos por columnas.

```{r}
sd.data <- scale(datos_numeric)
row.names(sd.data) <- paste("ID", 1:nrow(sd.data), sep="_")
```

## Distancia Euclidiana

```{r}
#| code-fold: true

dist.eucl <- dist(sd.data)
dist.eucl_matrix <- as.matrix(dist.eucl)
dist.eucl_plot <- fviz_dist(dist.eucl, lab_size = 6)
dist.eucl_plot

```

## Ward.D2

```{r}
#| code-fold: true
#| warning: false

euc_ward2_hc <- hclust(dist.eucl, method = "ward.D2")
fviz_dend(euc_ward2_hc, k=5, cex=0.5, k_colors = "jco", rect=TRUE, rect_border= "jco", rect_fill = TRUE, labels_track_height=0.25)
```

Se proyecta en el subespacio generado por las dos primeras componentes principales:

```{r}
#| code-fold: true

grp_euc_ward2 <- cutree(euc_ward2_hc, k=5)
fviz_cluster(list(data= sd.data, cluster= grp_euc_ward2), geom="point",
             palette = "jco", ellipse.type = "convex", show.clust.cent = FALSE, ggtheme = theme_bw())
```

:::

# K-medias

Se lleva a cabo el agrupamiento de K-medias con K=9.

```{r}
km.9 <- kmeans(sd.data, 9, nstart = 25)
fviz_cluster(km.9, data = sd.data, palette= "jco", ellipse.type = "euclid", star.plot=TRUE, geom="point",  ggtheme=theme_bw())


```

# Heatmap

```{r}
#| code-fold: true

data_matrix <- datos_numeric  |> as.matrix()
dm_dim <- dim(data_matrix)
rownames(data_matrix) <- paste("ID", 1:dm_dim[1], sep="_")


row_annot <- dplyr::select(datos, clonesize_factor:osmia_factor, Grupos) |> as.data.frame()
rownames(row_annot) <- paste("ID", 1:dm_dim[1], sep="_")


mapa <- pheatmap(data_matrix, 
         border_color = NA, 
         scale = "column",
         clustering_distance_rows = "euclidean", 
         cutree_rows = 5,
         treeheight_col=10,
         clustering_distance_cols = "euclidean", 
         clustering_method = "ward.D2", 
         #color= hcl.colors(10, "Spectral"),
         #breaks = c(-3, 0, 3, 6, 9, 12, 15),
         drop_levels = TRUE,
         show_colnames = T, 
         show_rownames = F,
         annotation_row = row_annot)
         
         #,
         #annotation_colors = cond_color)

mapa

#ggsave("heatmap_1.jpg", mapa, scale=1, dpi = 320)
```
